version: 0.2

env:
  variables:
    PYTHON_VERSION: "3.10"
    MODEL_NAME: "NickLamb/Mistral-7B-Instruct-v0.3"
    MODEL_FILE: "Mistral-7B-Instruct-v0.3.Q4_K_M.gguf"
    HF_TOKEN: ${HF_TOKEN}
    REPO_URL: "https://github.com/nicklamb97/openroad.git"
    BRANCH_NAME: "main"
    CSHARP_REPO_URL: "https://github.com/nicklamb97/csharp.git"

phases:
  install:
    runtime-versions:
      python: 3.10
    commands:
      - echo "🔧 Installing Python, curl, git, compilers, and required packages..."
      - apt-get update -y
      - apt-get install -y python3.10 python3.10-venv python3.10-dev curl build-essential gcc g++ git tree
      - ln -sf /usr/bin/python3.10 /usr/local/bin/python
      - ln -sf /usr/bin/python3.10 /usr/local/bin/python3
      - python --version
      - which python
      - curl --version
      - gcc --version
      - g++ --version
      - git --version
      - curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py
      - python get-pip.py
      - python -m pip install --upgrade pip
      - pip install wheel setuptools
      - pip install instructlab gitpython gradio sentence_transformers langchain_community tqdm huggingface_hub pypdf langchain faiss-cpu torch transformers langchain_text_splitters
      - echo "✅ Dependencies installed successfully"
      - pip list
      - echo "📦 Above is the list of installed packages"

  pre_build:
    commands:
      - echo "🔄 Cloning repository..."
      - git clone $REPO_URL repo
      - cd repo
      - git checkout $BRANCH_NAME
      - echo "✅ Repository cloned and checked out successfully"
      
      - echo "📜 Retrieving commit message..."
      - COMMIT_MESSAGE=$(git log --format=%B -n 1 "$CODEBUILD_RESOLVED_SOURCE_VERSION")
      - echo "Commit message - $COMMIT_MESSAGE"
      
      - echo "📄 Printing content of changed file(s):"
      - |
        git diff-tree --no-commit-id --name-only -r $CODEBUILD_RESOLVED_SOURCE_VERSION | grep '\.py$' | while read file; do
          echo "File: $file"
          echo "=========================="
          cat "$file"
          echo "=========================="
          echo ""
        done
      
      - echo "📥 Downloading ${MODEL_FILE} model..."
      - HF_TOKEN="$HF_TOKEN" ilab model download --repository=${MODEL_NAME} --filename=${MODEL_FILE}
      - echo "✅ Model downloaded successfully"
      
      - echo "🚀 Starting InstructLab server..."
      - nohup ilab model serve > server.log 2>&1 & SERVER_PID=$!
      - echo "📝 Server PID - $SERVER_PID"
      - echo "⏳ Waiting for server to start..."
      - sleep 20
      - if ! kill -0 $SERVER_PID 2>/dev/null; then echo "❌ Server failed to start"; exit 1; fi
      - echo "✅ Server started successfully"
      
      - echo "🚀 Initializing RAG system..."
      - python .github/workflows/rag_system.py
      - echo "✅ RAG system initialized and running"

  build:
    commands:
      - echo "🗂️ Creating directory for converted files..."
      - mkdir -p converted_files
      - echo "✅ Directory created - converted_files"
      
      - echo "🔍 Finding changed Python files and converting to C#..."
      - |
        git diff-tree --no-commit-id --name-only -r $CODEBUILD_RESOLVED_SOURCE_VERSION | grep '\.py$' | while read file; do
          echo "🐍➡️🔷 Converting $file to C#"
          python_code=$(cat "$file")
          output_file="converted_files/$(basename "${file%.py}.cs")"
          echo "python_code:"
          echo "$python_code"
          
          echo "🌐 Using ilab model chat for conversion..."
          prompt=$(sed "s/\${python_code}/$python_code/" convert_prompt.txt)
          echo "prompt:"
          echo "$prompt"
          
          echo "🚀 Augmenting prompt using RAG system..."
          augmented_prompt=$(python .github/workflows/rag_system.py "$prompt")
          
          echo "📄 Printing updated prompt:"
          echo "============================"
          echo "$augmented_prompt"
          echo "============================"
          
          echo "🌐 Using ilab model chat for conversion..."
          csharp_code=$(ilab model chat --max-tokens 30000 -qq "$augmented_prompt" 2>&1)
          exit_code=$?
          
          echo "ilab model chat command completed with exit code: $exit_code"
          echo "$csharp_code"
          
          echo "💾 Saving converted code to $output_file"
          echo "$csharp_code" > "$output_file"
          echo "✅ Converted $file to $output_file"
          
          echo "📄 Printing generated C# code:"
          echo "============================"
          cat "$output_file"
          echo "============================"
        done

  post_build:
    commands:
      - echo "🛑 Stopping InstructLab server..."
      - kill $SERVER_PID || true
      - echo "✅ Server stopped"

      - echo "📂 Debugging directory structure..."
      - pwd
      - ls -R
      - tree -L 3

      - echo "🔄 Cloning C# repository..."
      - git clone $CSHARP_REPO_URL temp_csharp
      - cd temp_csharp
      
      - echo "🔧 Configuring git..."
      - git config user.name "Nick Lamb"
      - git config user.email "nick.lamb@diegesis.co.uk"
      
      - echo "🔀 Creating new branch for converted files..."
      - BRANCH_NAME="auto-convert-python-to-csharp-$(date +%Y%m%d-%H%M%S)"
      - git checkout -b "$BRANCH_NAME"
      
      - echo "📋 Copying converted files..."
      - cp -r ../converted_files/* . || echo "No files to copy"
      - echo "Contents of current directory after copying:"
      - ls -la
      
      - echo "💾 Committing changes..."
      - git add .
      - git commit -m "Convert Python to C# - $COMMIT_MESSAGE" || echo "No changes to commit"
      
      - echo "🚀 Pushing new branch to repository..."
      - git push "https://$GITHUB_TOKEN@github.com/nicklamb97/csharp.git" "$BRANCH_NAME" || echo "No changes to push"
      
      - echo "✅ New branch pushed successfully (if there were changes)"
      - echo "Please create a pull request manually or set up a GitHub Action to create it automatically."

      - echo "Build completed on `date`"
      - cd ..  # Return to the root directory

artifacts:
  files:
    - repo/converted_files/**/*
  name: converted-csharp-files-$(date +%Y-%m-%d)