name: Convert Python to C# and Create PR

on:
  push:
    branches: [ main ]
    paths:
      - '**.py'  # This will only trigger on .py file changes

env:
  PYTHON_VERSION: '3.10'
  MODEL_NAME: 'NickLamb/Mistral-7B-Instruct-v0.3'
  MODEL_FILE: 'Mistral-7B-Instruct-v0.3.Q4_K_M.gguf'

jobs:
  convert_and_pr:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Python repo
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
      
    - name: Get commit message
      run: |
        echo "üìú Retrieving commit message for SHA: ${{ github.sha }}"
        COMMIT_MESSAGE=$(git log --format=%B -n 1 "${{ github.sha }}")
        echo "COMMIT_MESSAGE<<EOF" >> $GITHUB_ENV
        echo "$COMMIT_MESSAGE" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV
        echo "‚úÖ Commit message retrieved and stored in environment variable"

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Print content of changed file
      run: |
        echo "üìÑ Printing content of changed file(s):"
        git diff-tree --no-commit-id --name-only -r ${{ github.sha }} | grep '\.py$' | while read file; do
          echo "File: $file"
          echo "=========================="
          cat "$file"
          echo "=========================="
          echo ""
        done

    - name: Install dependencies
      run: |
        echo "üîß Installing required Python packages..."
        python -m pip install --upgrade pip
        pip install instructlab gitpython
        echo "‚úÖ Dependencies installed successfully"
        pip list
        echo "üì¶ Above is the list of installed packages"

    - name: Download model
      env:
        HF_TOKEN: ${{ secrets.HF_TOKEN }}
      run: |
        echo "üì• Downloading ${{ env.MODEL_FILE }} model..."
        HF_TOKEN="$HF_TOKEN" ilab model download --repository=${{ env.MODEL_NAME }} --filename=${{ env.MODEL_FILE }}
        echo "‚úÖ Model downloaded successfully"
        echo "MODEL_DOWNLOADED=true" >> $GITHUB_ENV

    - name: Start InstructLab server and convert Python to C#
      if: env.MODEL_DOWNLOADED == 'true'
      run: |
        echo "üöÄ Starting InstructLab server..."
        ilab model serve &
        SERVER_PID=$!
        echo "üìù Server PID: $SERVER_PID"

        echo "‚è≥ Waiting for 10 seconds to allow server to start..."
        sleep 10
        echo "‚úÖ Wait complete. Proceeding with conversion."

        echo "üóÇÔ∏è Creating directory for converted files..."
        mkdir -p converted_files
        echo "‚úÖ Directory created: converted_files"

        echo "üîç Finding changed Python files..."
        git diff-tree --no-commit-id --name-only -r ${{ github.sha }} | grep '\.py$' | while read file; do
          echo "üêç‚û°Ô∏èüî∑ Converting $file to C#"
          python_code=$(cat "$file")
          output_file="converted_files/$(basename "${file%.py}.cs")"
          
          echo "üåê Using ilab model chat for conversion..."
          prompt=$(sed "s/\${python_code}/$python_code/" convert_prompt.txt)
          csharp_code=$(echo "$prompt" | ilab model chat -qq)
          
          echo "üíæ Saving converted code to $output_file"
          echo "$csharp_code" > "$output_file"
          echo "‚úÖ Converted $file to $output_file"
          
          echo "üìÑ Printing generated C# code:"
          echo "============================"
          cat "$output_file"
          echo "============================"
        done

        echo "üõë Stopping InstructLab server..."
        kill $SERVER_PID || echo "Failed to kill server process"
        wait $SERVER_PID || echo "Error while waiting for server process to end"
        echo "‚úÖ Server stopped"

    - name: Checkout C# repo
      uses: actions/checkout@v3
      with:
        repository: nicklamb97/csharp
        path: csharp_repo
        token: ${{ secrets.PAT_TOKEN }}

    - name: Copy converted files and create PR
      run: |
        echo "üìÅ Copying converted files to C# repository..."
        cp -r converted_files/* csharp_repo/
        cd csharp_repo
        echo "üîß Configuring git..."
        git config user.name "GitHub Actions Bot"
        git config user.email "<>"
        echo "‚ûï Adding changes to git..."
        git add .
        echo "üìù Committing changes..."
        git commit -m "Convert Python to C#: ${{ env.COMMIT_MESSAGE }}"
        echo "üöÄ Pushing changes to remote branch..."
        git push origin HEAD:auto-convert-python-to-csharp
        
        echo "üîó Creating pull request..."
        PR_URL=$(curl -X POST -H "Authorization: token ${{ secrets.PAT_TOKEN }}" \
             -H "Accept: application/vnd.github.v3+json" \
             https://api.github.com/repos/nicklamb97/csharp/pulls \
             -d "{
               \"title\": \"Automated Python to C# Conversion\",
               \"body\": \"This PR contains automatically converted C# code based on the following commit:\\n\\n${{ env.COMMIT_MESSAGE }}\\n\\nPlease review the converted code and merge if appropriate.\",
               \"head\": \"auto-convert-python-to-csharp\",
               \"base\": \"main\"
             }" | jq -r .html_url)
        
        echo "‚úÖ Pull request created: $PR_URL"