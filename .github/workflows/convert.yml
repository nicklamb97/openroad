name: Convert Python to C# and Create PR

on:
  push:
    branches: [ main ]
    paths:
      - '**.py'  # This will only trigger on .py file changes

env:
  PYTHON_VERSION: '3.10'
  MODEL_NAME: 'NickLamb/Mistral-7B-Instruct-v0.3'
  MODEL_FILE: 'Mistral-7B-Instruct-v0.3.Q4_K_M.gguf'

jobs:
  convert_and_pr:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Python repo
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Get commit message
      run: |
        echo "📜 Retrieving commit message for SHA: ${{ github.sha }}"
        COMMIT_MESSAGE=$(git log --format=%B -n 1 "${{ github.sha }}")
        echo "COMMIT_MESSAGE<<EOF" >> $GITHUB_ENV
        echo "$COMMIT_MESSAGE" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV
        echo "✅ Commit message retrieved and stored in environment variable"

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Print content of changed file
      run: |
        echo "📄 Printing content of changed file(s):"
        git diff-tree --no-commit-id --name-only -r ${{ github.sha }} | grep '\.py$' | while read file; do
          echo "File: $file"
          echo "=========================="
          cat "$file"
          echo "=========================="
          echo ""
        done

    - name: Install dependencies
      run: |
        echo "🔧 Installing required Python packages..."
        python -m pip install --upgrade pip
        pip install instructlab gitpython gradio sentence_transformers langchain_community tqdm huggingface_hub pypdf langchain faiss-cpu torch transformers langchain_text_splitters
        echo "✅ Dependencies installed successfully"
        pip list
        echo "📦 Above is the list of installed packages"

    - name: Download model
      env:
        HF_TOKEN: ${{ secrets.HF_TOKEN }}
      run: |
        echo "📥 Downloading ${{ env.MODEL_FILE }} model..."
        HF_TOKEN="$HF_TOKEN" ilab model download --repository=${{ env.MODEL_NAME }} --filename=${{ env.MODEL_FILE }}
        echo "✅ Model downloaded successfully"
        echo "MODEL_DOWNLOADED=true" >> $GITHUB_ENV

    - name: Start InstructLab server
      if: env.MODEL_DOWNLOADED == 'true'
      run: |
        echo "🚀 Starting InstructLab server..."
        nohup ilab model serve > server.log 2>&1 &
        SERVER_PID=$!
        echo "📝 Server PID: $SERVER_PID"

        echo "⏳ Waiting for server to start..."
        sleep 20  # Increased wait time for server startup
        echo "✅ Server started successfully"

    - name: Initialize and run RAG system
      if: env.MODEL_DOWNLOADED == 'true'
      run: |
        echo "🚀 Initializing RAG system..."
        python .github/workflows/rag_system.py
        echo "✅ RAG system initialized and running"

    - name: Convert Python to C# and Create PR
      if: env.MODEL_DOWNLOADED == 'true'
      run: |
        echo "🗂️ Creating directory for converted files..."
        mkdir -p converted_files
        echo "✅ Directory created: converted_files"

        echo "🔍 Finding changed Python files..."
        git diff-tree --no-commit-id --name-only -r ${{ github.sha }} | grep '\.py$' | while read file; do
          echo "🐍➡️🔷 Converting $file to C#"
          python_code=$(cat "$file")
          output_file="converted_files/$(basename "${file%.py}.cs")"
          echo "python_code:"
          echo "$python_code"
          
          echo "🌐 Using ilab model chat for conversion..."
          prompt=$(sed "s/\${python_code}/$python_code/" convert_prompt.txt)
          echo "prompt:"
          echo "$prompt"

          echo "🚀 Augmenting prompt using RAG system..."
          augmented_prompt=$(python .github/workflows/rag_system.py "$prompt")
          
          echo "📄 Printing updated prompt:"
          echo "============================"
          echo "$augmented_prompt"
          echo "============================"
          
          echo "🌐 Using ilab model chat for conversion..."
          csharp_code=$(ilab model chat --max-tokens 30000 --verbose "$augmented_prompt" 2>&1)
          exit_code=$?

          echo "ilab model chat command completed with exit code: $exit_code"
          echo "$csharp_code"
          
          echo "💾 Saving converted code to $output_file"
          echo "$csharp_code" > "$output_file"
          echo "✅ Converted $file to $output_file"
          
          echo "📄 Printing generated C# code:"
          echo "============================"
          cat "$output_file"
          echo "============================"
        done

    - name: Create PR with converted files
      env:
        GITHUB_TOKEN: ${{ secrets.GENERATED_REPO_TOKEN }}
      run: |
        echo "🔄 Cloning C# repository..."
        git clone "https://github.com/nicklamb97/csharp.git" temp_csharp
        cd temp_csharp
        
        echo "🔧 Configuring git..."
        git config user.name "Nick Lamb"
        git config user.email "nick.lamb@diegesis.co.uk"
        
        echo "🔀 Creating new branch for converted files..."
        BRANCH_NAME="auto-convert-python-to-csharp-$(date +%Y%m%d-%H%M%S)"
        git checkout -b "$BRANCH_NAME"
        
        echo "📋 Copying converted files..."
        cp -r ../converted_files/* .
        git add .
        
        echo "💾 Committing changes..."
        git commit -m "Convert Python to C#: ${{ env.COMMIT_MESSAGE }}" || echo "No changes to commit"
        
        echo "🚀 Pushing new branch to repository..."
        git push "https://$GITHUB_TOKEN@github.com/nicklamb97/csharp.git" "$BRANCH_NAME"
        
        echo "🔗 Creating pull request..."
        PR_URL=$(curl -X POST -H "Authorization: token $GITHUB_TOKEN" \
             -H "Accept: application/vnd.github.v3+json" \
             https://api.github.com/repos/nicklamb97/csharp/pulls \
             -d "{
               \"title\": \"Automated Python to C# Conversion\",
               \"body\": \"This PR contains automatically converted C# code based on the following commit:\\n\\n${{ env.COMMIT_MESSAGE }}\\n\\nPlease review the converted code and merge if appropriate.\",
               \"head\": \"$BRANCH_NAME\",
               \"base\": \"main\"
             }" | jq -r .html_url)
        
        echo "✅ Pull request created: $PR_URL"
        
        cd ..
        rm -rf temp_csharp
